services:
  postgresql:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${PG_DATABASE}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
    ports:
      - "${PG_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - discord-network

  ts-service:
    build:
      context: .
      dockerfile: ./dockerfiles/dev.Dockerfile
    volumes:
      - ./src:/app/src
    environment:
      - TOKEN=${TOKEN}
      - APP_ID=${APP_ID}
      - PUBLIC_KEY=${PUBLIC_KEY}
      - CHANNEL_ID=${CHANNEL_ID}
      - PG_HOST=${PG_HOST}
      - PG_DATABASE=${PG_DATABASE}
      - PG_USER=${PG_USER}
      - PG_PASSWORD=${PG_PASSWORD}
      - PG_PORT=${PG_PORT}
      - NODE_ENV=development
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}

    depends_on:
      postgresql:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - discord-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    ports:
      - "8888:80"
    depends_on:
      - postgresql
    environment:
      PGADMIN_DEFAULT_EMAIL: ${ADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${ADMIN_PASSWORD}
    volumes:
      - discord-pgadmin:/var/lib/pgadmin
    networks:
      - discord-network

networks:
  discord-network:
volumes:
  postgres_data:
  discord-pgadmin:

    